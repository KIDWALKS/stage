name: DevOps Pipeline to Stage with Version Tag

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      CLIENT_IMAGE: inventoryapp-client-stage
      SERVER_IMAGE: inventoryapp-server-stage

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v3

      - name: üè∑Ô∏è Set and export VERSION_TAG
        run: echo "VERSION_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: üìä SonarCloud Scan (optional)
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          export SONAR_SCANNER_HOME=$(pwd)/sonar-scanner-5.0.1.3006-linux
          export PATH="$SONAR_SCANNER_HOME/bin:$PATH"
          sonar-scanner -Dsonar.login=${SONAR_TOKEN}

      - name: üê≥ Build Docker Images
        run: |
          docker build -t $ECR_REGISTRY/$CLIENT_IMAGE:$VERSION_TAG -t $ECR_REGISTRY/$CLIENT_IMAGE:latest -f client/Dockerfile .
          docker build -t $ECR_REGISTRY/$SERVER_IMAGE:$VERSION_TAG -t $ECR_REGISTRY/$SERVER_IMAGE:latest -f server/Dockerfile .

      - name: üõ°Ô∏è Trivy Scan (Client)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ env.CLIENT_IMAGE }}:${{ env.VERSION_TAG }}
          format: table
          severity: CRITICAL,HIGH

      - name: üõ°Ô∏è Trivy Scan (Server)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ env.SERVER_IMAGE }}:${{ env.VERSION_TAG }}
          format: table
          severity: CRITICAL,HIGH

      - name: üì§ Push Docker Images to ECR
        run: |
          docker push $ECR_REGISTRY/$CLIENT_IMAGE:$VERSION_TAG
          docker push $ECR_REGISTRY/$CLIENT_IMAGE:latest
          docker push $ECR_REGISTRY/$SERVER_IMAGE:$VERSION_TAG
          docker push $ECR_REGISTRY/$SERVER_IMAGE:latest

      - name: üöÄ Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          envs: VERSION_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,DATABASE_URL,AWS_S3_BUCKET_NAME
          script: |
            export ECR_REGISTRY="${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
            export NEXT_PUBLIC_API_BASE_URL="https://${{ secrets.STAGE_DOMAIN }}"

            echo "üîê Logging into ECR..."
            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            aws configure set region "$AWS_REGION"
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY || { echo "‚ùå ECR login failed"; exit 1; }

            echo "üì• Pulling images..."
            docker pull $ECR_REGISTRY/inventoryapp-client-stage:$VERSION_TAG || { echo "‚ùå Failed to pull client image"; exit 1; }
            docker pull $ECR_REGISTRY/inventoryapp-server-stage:$VERSION_TAG || { echo "‚ùå Failed to pull server image"; exit 1; }

            echo "üìÇ Preparing deployment directory..."
            mkdir -p ~/kidwalksapparells-inventory-stage
            cd ~/kidwalksapparells-inventory-stage

            echo "‚¨áÔ∏è Fetching latest docker-compose.yml..."
            curl -s -o docker-compose.yml https://raw.githubusercontent.com/KIDWALKS/stage/main/docker-compose.yml || { echo "‚ùå Failed to fetch docker-compose.yml"; exit 1; }

            echo "üõë Stopping existing containers..."
            docker compose down || true

            echo "üöÄ Starting new containers..."
            if ECR_REGISTRY=$ECR_REGISTRY VERSION_TAG=$VERSION_TAG \
              DATABASE_URL=$DATABASE_URL \
              NEXT_PUBLIC_API_BASE_URL=$NEXT_PUBLIC_API_BASE_URL \
              AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
              AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
              AWS_REGION=$AWS_REGION \
              AWS_S3_BUCKET_NAME=$AWS_S3_BUCKET_NAME \
              docker compose up -d; then
              echo "‚úÖ Stage containers started successfully."
            else
              echo "‚ùå Failed to start stage containers."
              exit 1
            fi

            echo "üìÑ Tailing logs..."
            docker ps

            CLIENT_CONTAINER=$(docker ps --filter ancestor=$ECR_REGISTRY/inventoryapp-client-stage:$VERSION_TAG --format "{{.Names}}" | head -n1)
            SERVER_CONTAINER=$(docker ps --filter ancestor=$ECR_REGISTRY/inventoryapp-server-stage:$VERSION_TAG --format "{{.Names}}" | head -n1)

            if [ -n "$CLIENT_CONTAINER" ]; then
              echo "üßæ Client logs:"
              docker logs --tail=10 $CLIENT_CONTAINER
            else
              echo "‚ö†Ô∏è Client container not found."
            fi

            if [ -n "$SERVER_CONTAINER" ]; then
              echo "üßæ Server logs:"
              docker logs --tail=10 $SERVER_CONTAINER
            else
              echo "‚ö†Ô∏è Server container not found."
            fi

            echo "üéâ Stage app deployed at: https://${{ secrets.STAGE_DOMAIN }}"
