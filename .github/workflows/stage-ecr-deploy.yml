name: Deploy to Stage with Version Tag

on:
  push:
    tags:
      - 'v*'  # triggers on v1.0.0, v2.3.1 etc.

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      CLIENT_IMAGE: inventoryapp-client-stage
      SERVER_IMAGE: inventoryapp-server-stage

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v3

      - name: üè∑Ô∏è Set and export VERSION_TAG
        run: echo "VERSION_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # üß† SonarQube Code Analysis (Optional)
      - name: üìä SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # üîí Checkov (IaC Security) - Optional
      - name: üõ°Ô∏è Checkov - Dockerfile Scan
        uses: bridgecrewio/checkov-action@master
        continue-on-error: true
        with:
          directory: .
          framework: dockerfile
          soft_fail: true

      # üê≥ Build Docker Images
      - name: üê≥ Build Docker Images
        run: |
          docker build -t $ECR_REGISTRY/$CLIENT_IMAGE:$VERSION_TAG -t $ECR_REGISTRY/$CLIENT_IMAGE:latest -f client/Dockerfile .
          docker build -t $ECR_REGISTRY/$SERVER_IMAGE:$VERSION_TAG -t $ECR_REGISTRY/$SERVER_IMAGE:latest -f server/Dockerfile .

      # üîç Trivy Vulnerability Scan (Optional)
      - name: üîç Scan Images with Trivy
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: $ECR_REGISTRY/$CLIENT_IMAGE:$VERSION_TAG
          format: 'sarif'
          output: 'trivy-results.sarif'

      # üì¶ Push Docker Images to ECR
      - name: üì§ Push Docker Images to Amazon ECR
        run: |
          docker push $ECR_REGISTRY/$CLIENT_IMAGE:$VERSION_TAG
          docker push $ECR_REGISTRY/$CLIENT_IMAGE:latest
          docker push $ECR_REGISTRY/$SERVER_IMAGE:$VERSION_TAG
          docker push $ECR_REGISTRY/$SERVER_IMAGE:latest

      # üöÄ SSH Deploy to EC2
      - name: üöÄ Deploy Stage via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export ECR_REGISTRY="${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
            export VERSION_TAG="${GITHUB_REF#refs/tags/}"

            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

            docker pull $ECR_REGISTRY/inventoryapp-client-stage:$VERSION_TAG
            docker pull $ECR_REGISTRY/inventoryapp-server-stage:$VERSION_TAG

            mkdir -p ~/kidwalksapparells-inventory-stage && cd ~/kidwalksapparells-inventory-stage
            curl -s -o docker-compose.yml https://raw.githubusercontent.com/KIDWALKS/stage/main/docker-compose.yml

            docker-compose down || true
            ECR_REGISTRY=$ECR_REGISTRY VERSION_TAG=$VERSION_TAG docker-compose up -d

            docker ps

            docker logs --tail=10 $(docker ps --filter ancestor=$ECR_REGISTRY/inventoryapp-client-stage:$VERSION_TAG --format "{{.Names}}" | head -n1)
            docker logs --tail=10 $(docker ps --filter ancestor=$ECR_REGISTRY/inventoryapp-server-stage:$VERSION_TAG --format "{{.Names}}" | head -n1)

            echo "üåê Access: https://${{ secrets.STAGE_DOMAIN }}"
