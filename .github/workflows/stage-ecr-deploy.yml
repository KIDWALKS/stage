name: Deploy to Stage with Version Tag

on:
  push:
    tags:
      - 'v*'  # triggers on v1.0.0, v2.3.1 etc.

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      CLIENT_IMAGE: inventoryapp-client-stage
      SERVER_IMAGE: inventoryapp-server-stage

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v3

      - name: üè∑Ô∏è Set and export VERSION_TAG
        run: echo "VERSION_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: üê≥ Build and Push Docker Images with Version Tags
        run: |
          docker build -t $ECR_REGISTRY/$CLIENT_IMAGE:$VERSION_TAG -t $ECR_REGISTRY/$CLIENT_IMAGE:latest -f client/Dockerfile .
          docker build -t $ECR_REGISTRY/$SERVER_IMAGE:$VERSION_TAG -t $ECR_REGISTRY/$SERVER_IMAGE:latest -f server/Dockerfile .

          docker push $ECR_REGISTRY/$CLIENT_IMAGE:$VERSION_TAG
          docker push $ECR_REGISTRY/$CLIENT_IMAGE:latest

          docker push $ECR_REGISTRY/$SERVER_IMAGE:$VERSION_TAG
          docker push $ECR_REGISTRY/$SERVER_IMAGE:latest

      - name: üöÄ SSH to EC2 and Deploy Stage
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export ECR_REGISTRY="${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
            export VERSION_TAG="${GITHUB_REF#refs/tags/}"

            echo "üîê Logging into ECR..."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

            echo "üì¶ Pulling stage images..."
            docker pull $ECR_REGISTRY/inventoryapp-client-stage:$VERSION_TAG
            docker pull $ECR_REGISTRY/inventoryapp-server-stage:$VERSION_TAG

            echo "üìÅ Setting up deployment directory..."
            mkdir -p ~/kidwalksapparells-inventory-stage
            cd ~/kidwalksapparells-inventory-stage

            echo "üìÑ Fetching latest docker-compose.yml..."
            curl -s -o docker-compose.yml https://raw.githubusercontent.com/KIDWALKS/stage/main/docker-compose.yml

            echo "üõë Stopping previous containers..."
            docker-compose down || true

            echo "üöÄ Starting new containers..."
            ECR_REGISTRY=$ECR_REGISTRY VERSION_TAG=$VERSION_TAG docker-compose up -d

            echo "‚úÖ Stage Deployment Complete: Version $VERSION_TAG"
            echo "üåê Client: https://${{ secrets.STAGE_DOMAIN }}"
            echo "üîß Server: http://localhost:3101"

            echo "ü©∫ Checking running containers..."
            docker ps

            echo "üìú Getting client container logs..."
            CLIENT_CONTAINER=$(docker ps --filter ancestor=$ECR_REGISTRY/inventoryapp-client-stage:$VERSION_TAG --format "{{.Names}}" | head -n1)
            docker logs --tail=10 "$CLIENT_CONTAINER" || echo "No client logs found"

            echo "üìú Getting server container logs..."
            SERVER_CONTAINER=$(docker ps --filter ancestor=$ECR_REGISTRY/inventoryapp-server-stage:$VERSION_TAG --format "{{.Names}}" | head -n1)
            docker logs --tail=10 "$SERVER_CONTAINER" || echo "No server logs found"

            echo "üîó Access Stage Client: https://${{ secrets.STAGE_DOMAIN }}"
            echo "üîó Stage Server (API): http://localhost:3101"
